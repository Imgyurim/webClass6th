(this.webpackJsonpwaffle=this.webpackJsonpwaffle||[]).push([[47],{762:function(E,p,S){"use strict";(function(M){Object.defineProperty(p,"__esModule",{value:!0});function f(n){return typeof n=="object"&&!("toString"in n)?Object.prototype.toString.call(n).slice(8,-1):n}var P=typeof M=="object"&&!0;function u(n,t){if(!n)throw P?new Error("Invariant failed"):new Error(t())}p.invariant=u;var l=Object.prototype.hasOwnProperty,q=Array.prototype.splice,C=Object.prototype.toString;function c(n){return C.call(n).slice(8,-1)}var y=Object.assign||function(n,t){return g(t).forEach(function(r){l.call(t,r)&&(n[r]=t[r])}),n},g=typeof Object.getOwnPropertySymbols=="function"?function(n){return Object.keys(n).concat(Object.getOwnPropertySymbols(n))}:function(n){return Object.keys(n)};function s(n){return Array.isArray(n)?y(n.constructor(n.length),n):c(n)==="Map"?new Map(n):c(n)==="Set"?new Set(n):n&&typeof n=="object"?y(Object.create(Object.getPrototypeOf(n)),n):n}var $=function(){function n(){this.commands=y({},_),this.update=this.update.bind(this),this.update.extend=this.extend=this.extend.bind(this),this.update.isEquals=function(t,r){return t===r},this.update.newContext=function(){return new n().update}}return Object.defineProperty(n.prototype,"isEquals",{get:function(){return this.update.isEquals},set:function(t){this.update.isEquals=t},enumerable:!0,configurable:!0}),n.prototype.extend=function(t,r){this.commands[t]=r},n.prototype.update=function(t,r){var i=this,a=typeof r=="function"?{$apply:r}:r;Array.isArray(t)&&Array.isArray(a)||u(!Array.isArray(a),function(){return"update(): You provided an invalid spec to update(). The spec may not contain an array except as the value of $set, $push, $unshift, $splice or any custom command allowing an array value."}),u(typeof a=="object"&&a!==null,function(){return"update(): You provided an invalid spec to update(). The spec and every included key path must be plain objects containing one of the "+("following commands: "+Object.keys(i.commands).join(", ")+".")});var o=t;return g(a).forEach(function(e){if(l.call(i.commands,e)){var I=t===o;o=i.commands[e](a[e],o,a,t),I&&i.isEquals(o,t)&&(o=t)}else{var h=c(t)==="Map"?i.update(t.get(e),a[e]):i.update(t[e],a[e]),U=c(o)==="Map"?o.get(e):o[e];(!i.isEquals(h,U)||typeof h=="undefined"&&!l.call(t,e))&&(o===t&&(o=s(t)),c(o)==="Map"?o.set(e,h):o[e]=h)}}),o},n}();p.Context=$;var _={$push:function(n,t,r){return m(t,r,"$push"),n.length?t.concat(n):t},$unshift:function(n,t,r){return m(t,r,"$unshift"),n.length?n.concat(t):t},$splice:function(n,t,r,i){return T(t,r),n.forEach(function(a){w(a),t===i&&a.length&&(t=s(i)),q.apply(t,a)}),t},$set:function(n,t,r){return J(r),n},$toggle:function(n,t){d(n,"$toggle");var r=n.length?s(t):t;return n.forEach(function(i){r[i]=!t[i]}),r},$unset:function(n,t,r,i){return d(n,"$unset"),n.forEach(function(a){Object.hasOwnProperty.call(t,a)&&(t===i&&(t=s(i)),delete t[a])}),t},$add:function(n,t,r,i){return A(t,"$add"),d(n,"$add"),c(t)==="Map"?n.forEach(function(a){var o=a[0],e=a[1];t===i&&t.get(o)!==e&&(t=s(i)),t.set(o,e)}):n.forEach(function(a){t===i&&!t.has(a)&&(t=s(i)),t.add(a)}),t},$remove:function(n,t,r,i){return A(t,"$remove"),d(n,"$remove"),n.forEach(function(a){t===i&&t.has(a)&&(t=s(i)),t.delete(a)}),t},$merge:function(n,t,r,i){return Y(t,n),g(n).forEach(function(a){n[a]!==t[a]&&(t===i&&(t=s(i)),t[a]=n[a])}),t},$apply:function(n,t){return D(n),n(t)}},v=new $;p.isEquals=v.update.isEquals,p.extend=v.extend,p.default=v.update,p.default.default=E.exports=y(p.default,p);function m(n,t,r){u(Array.isArray(n),function(){return"update(): expected target of "+f(r)+" to be an array; got "+f(n)+"."}),d(t[r],r)}function d(n,t){u(Array.isArray(n),function(){return"update(): expected spec of "+f(t)+" to be an array; got "+f(n)+". Did you forget to wrap your parameter in an array?"})}function T(n,t){u(Array.isArray(n),function(){return"Expected $splice target to be an array; got "+f(n)}),w(t.$splice)}function w(n){u(Array.isArray(n),function(){return"update(): expected spec of $splice to be an array of arrays; got "+f(n)+". Did you forget to wrap your parameters in an array?"})}function D(n){u(typeof n=="function",function(){return"update(): expected spec of $apply to be a function; got "+f(n)+"."})}function J(n){u(Object.keys(n).length===1,function(){return"Cannot have more than one key in an object with $set"})}function Y(n,t){u(t&&typeof t=="object",function(){return"update(): $merge expects a spec of type 'object'; got "+f(t)}),u(n&&typeof n=="object",function(){return"update(): $merge expects a target of type 'object'; got "+f(n)})}function A(n,t){var r=c(n);u(r==="Map"||r==="Set",function(){return"update(): "+f(t)+" expects a target of type Set or Map; got "+f(r)})}}).call(this,S(223))}}]);
